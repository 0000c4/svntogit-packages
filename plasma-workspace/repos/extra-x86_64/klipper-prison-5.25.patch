--- plasma-workspace-5.7.4/klipper/klipper.cpp.orig	2016-08-30 21:44:15.250331148 +0000
+++ plasma-workspace-5.7.4/klipper/klipper.cpp	2016-08-30 21:44:27.716944865 +0000
@@ -50,8 +50,7 @@
 #include "klipperpopup.h"
 
 #ifdef HAVE_PRISON
-#include <prison/DataMatrixBarcode>
-#include <prison/QRCodeBarcode>
+#include <prison/Prison>
 #endif
 
 #include <config-X11.h>
@@ -913,7 +913,7 @@
 class BarcodeLabel : public QLabel
 {
 public:
-    BarcodeLabel(prison::AbstractBarcode *barcode, QWidget *parent = nullptr)
+    BarcodeLabel(Prison::AbstractBarcode *barcode, QWidget *parent = nullptr)
         : QLabel(parent)
         , m_barcode(barcode)
         {
@@ -926,12 +926,12 @@
         setPixmap(QPixmap::fromImage(m_barcode->toImage(event->size())));
     }
 private:
-    QScopedPointer<prison::AbstractBarcode> m_barcode;
+    QScopedPointer<Prison::AbstractBarcode> m_barcode;
 };
 
 void Klipper::showBarcode(const QSharedPointer< const HistoryItem > &item)
 {
-    using namespace prison;
+    using namespace Prison;
     QPointer<QDialog> dlg(new QDialog());
     dlg->setWindowTitle( i18n("Mobile Barcode") );
     QDialogButtonBox *buttons = new QDialogButtonBox(QDialogButtonBox::Ok, dlg);
@@ -942,8 +942,8 @@
     QWidget* mw = new QWidget(dlg);
     QHBoxLayout* layout = new QHBoxLayout(mw);
 
-    QRCodeBarcode *qrCode = new QRCodeBarcode;
-    DataMatrixBarcode *dataMatrix = new DataMatrixBarcode;
+    AbstractBarcode *qrCode = createBarcode(QRCode);
+    AbstractBarcode *dataMatrix = createBarcode(DataMatrix);
     if (item) {
         qrCode->setData(item->text());
         dataMatrix->setData(item->text());
--- plasma-workspace-5.7.4/klipper/clipboardjob.cpp.orig	2016-08-23 12:57:58.000000000 +0000
+++ plasma-workspace-5.7.4/klipper/clipboardjob.cpp	2016-08-30 21:37:18.525435667 +0000
@@ -28,10 +28,7 @@
 #include <QIcon>
 
 #ifdef HAVE_PRISON
-#include <prison/QRCodeBarcode>
-#include <prison/DataMatrixBarcode>
-#include <prison/Code39Barcode>
-#include <prison/Code93Barcode>
+#include <prison/Prison>
 #endif
 
 const static QString s_iconKey = QStringLiteral("icon");
@@ -92,26 +89,26 @@
 #ifdef HAVE_PRISON
         int pixelWidth = parameters().value(QStringLiteral("width")).toInt();
         int pixelHeight = parameters().value(QStringLiteral("height")).toInt();
-        prison::AbstractBarcode *code = nullptr;
+        Prison::AbstractBarcode *code = nullptr;
         switch (parameters().value(QStringLiteral("barcodeType")).toInt()) {
         case 1: {
-            code = new prison::DataMatrixBarcode;
+            code = Prison::createBarcode(Prison::DataMatrix);
             const int size = qMin(pixelWidth, pixelHeight);
             pixelWidth = size;
             pixelHeight = size;
             break;
         }
         case 2: {
-            code = new prison::Code39Barcode;
+            code = Prison::createBarcode(Prison::Code39);
             break;
         }
         case 3: {
-            code = new prison::Code93Barcode;
+            code = Prison::createBarcode(Prison::Code93);
             break;
         }
         case 0:
         default: {
-            code = new prison::QRCodeBarcode;
+            code = Prison::createBarcode(Prison::QRCode);
             const int size = qMin(pixelWidth, pixelHeight);
             pixelWidth = size;
             pixelHeight = size;
@@ -129,7 +126,7 @@
                     emitResult();
                 }
             );
-            auto future = QtConcurrent::run(code, &prison::AbstractBarcode::toImage, QSizeF(pixelWidth, pixelHeight));
+            auto future = QtConcurrent::run(code, &Prison::AbstractBarcode::toImage, QSizeF(pixelWidth, pixelHeight));
             watcher->setFuture(future);
             return;
         } else {
