commit 70c8d2d8c412ad5639db8a018c7385fd99d0373f
Author: Anatol Pomozov <anatol.pomozov@gmail.com>
Date:   Sat Jan 7 09:26:22 2017 -0800

    Fix error messages for Python 3.6
    
    https://github.com/vim/vim/issues/1359
    https://bugs.archlinux.org/task/52401
    https://bbs.archlinux.org/viewtopic.php?id=221579

diff --git a/src/testdir/test87.ok b/src/testdir/test87.ok
index d90ef8625..b51788bde 100644
--- a/src/testdir/test87.ok
+++ b/src/testdir/test87.ok
@@ -658,10 +658,10 @@ assert sys.stderr.closed()==False:NOT FAILED
 assert sys.stdout.errors=="strict":NOT FAILED
 assert sys.stderr.errors=="strict":NOT FAILED
 assert sys.stdout.encoding==sys.stderr.encoding:NOT FAILED
-sys.stdout.write(None):(<class 'TypeError'>, TypeError("Can't convert 'NoneType' object to str implicitly",))
+sys.stdout.write(None):(<class 'TypeError'>, TypeError('argument must be str, bytes or bytearray, not None',))
 >> OutputWriteLines
 sys.stdout.writelines(None):(<class 'TypeError'>, TypeError("'NoneType' object is not iterable",))
-sys.stdout.writelines([1]):(<class 'TypeError'>, TypeError("Can't convert 'int' object to str implicitly",))
+sys.stdout.writelines([1]):(<class 'TypeError'>, TypeError('argument must be str, bytes or bytearray, not int',))
 >>> Testing *Iter* using sys.stdout.writelines(%s)
 sys.stdout.writelines(FailingIter()):(<class 'NotImplementedError'>, NotImplementedError('iter',))
 sys.stdout.writelines(FailingIterNext()):(<class 'NotImplementedError'>, NotImplementedError('next',))
@@ -700,8 +700,8 @@ vim.foreach_rtp(NoArgsCall()):(<class 'TypeError'>, TypeError('__call__() takes
 vim.foreach_rtp(FailingCall()):(<class 'NotImplementedError'>, NotImplementedError('call',))
 vim.foreach_rtp(int, 2):(<class 'TypeError'>, TypeError('foreach_rtp() takes exactly one argument (2 given)',))
 > import
-import xxx_no_such_module_xxx:(<class 'ImportError'>, ImportError('No module named xxx_no_such_module_xxx',))
-import failing_import:(<class 'ImportError'>, ImportError('No module named failing_import',))
+import xxx_no_such_module_xxx:(<class 'ModuleNotFoundError'>, ModuleNotFoundError("No module named 'xxx_no_such_module_xxx'",))
+import failing_import:(<class 'ModuleNotFoundError'>, ModuleNotFoundError("No module named 'failing_import'",))
 import failing:(<class 'NotImplementedError'>, NotImplementedError())
 > Options
 >> OptionsItem
