#! /bin/sh
#
# To run this script, ensure shunit2 (https://code.google.com/p/shunit2/)
# is available on the local directory, then just run sh bin_archlinux-java_tests
#
# inotifywait -r -m -e MODIFY . | while read l; do sh bin_archlinux-java_tests; done

declare test_dir

. ./bin_archlinux-java > /dev/null

INIT_JVM_DIR=${JVM_DIR}
INIT_DEFAULT_PATH=${DEFAULT_PATH}
INIT_BIN_PATH=${BIN_PATH}
INIT_WRAPPER_PATH=${WRAPPER_PATH}

# Redefining this so that tested script can be invoked without root privileges
check_root() {
  true
}


get_rand_str() {
  echo $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
}

setUp() {
  test_dir=$(mktemp -d)
  JVM_DIR=${test_dir}${INIT_JVM_DIR}
  DEFAULT_PATH=${test_dir}${INIT_DEFAULT_PATH}
  JAVA_NAME=$(get_rand_str)
  BIN_PATH=${test_dir}${INIT_BIN_PATH}
  mkdir -p ${BIN_PATH}
  WRAPPER_PATH=${test_dir}${INIT_WRAPPER_PATH}
  mkdir -p $(dirname ${WRAPPER_PATH})
}

tearDown() {
  rm -rf ${test_dir}
}


# $1: path of Java environment to create
create_valid_jre_env() {
  mkdir -p ${JVM_DIR}/$1/bin
  touch    ${JVM_DIR}/$1/bin/java
  chmod +x ${JVM_DIR}/$1/bin/java
}

# $1: path of Java environment to create
create_valid_jdk_env() {
  create_valid_jre_env "$1"
  touch    ${JVM_DIR}/$1/bin/javac
  chmod +x ${JVM_DIR}/$1/bin/javac
  create_valid_jre_env "$1/jre"
}

set_default_for_test() {
  ln -s $1 ${DEFAULT_PATH}
  ln -s ${WRAPPER_PATH} ${BIN_PATH}/java
  if [ -x ${DEFAULT_PATH}/bin/javac ]; then
    ln -s ${WRAPPER_PATH} ${BIN_PATH}/javac
  fi
}

assertDefaultNotSet() {
  assertNull 'Default is set' "$(readlink ${DEFAULT_PATH})"
  assertNull "PATH has a java binary" "$(readlink ${BIN_PATH}/java)"
  assertNull "PATH has a javac binary" "$(readlink ${BIN_PATH}/javac)"
}

assertDefaultSetTo() {
  assertEquals "Default is not set to $1" "$1" "$(readlink ${DEFAULT_PATH})"
  assertEquals "PATH has no java binary" "${WRAPPER_PATH}" "$(readlink ${BIN_PATH}/java)"
  if [ -d ${DEFAULT_PATH}/jre ]; then
    assertEquals "PATH has no javac binary" "${WRAPPER_PATH}" "$(readlink ${BIN_PATH}/javac)"
  fi
}


test_valid_java_env_valid() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  assertTrue 'Does not detect valid Java env' "is_java_valid ${JAVA_NAME}/jre"
}

test_valid_java_env_not_valid() {
  create_valid_jre_env "non_existing"
  assertFalse 'Does not detect invalid Java env' "is_java_valid ${JAVA_NAME}/jre"
}

test_get_default_java() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  assertEquals 'Wrong default Java found' "${JAVA_NAME}/jre" "$(get_default_java)"
}

test_get_default_java_no_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  assertNull 'Wrong default Java found' "$(get_default_java)"
}

test_get_installed_javas() {
  JAVA_NAME_FIRST_ALPHA="a$(get_rand_str)"
  JAVA_NAME_SECON_ALPHA="b$(get_rand_str)"
  JAVA_NAME_THIRD_ALPHA="c$(get_rand_str)"
  create_valid_jre_env "${JAVA_NAME_FIRST_ALPHA}/jre"
  create_valid_jre_env "${JAVA_NAME_SECON_ALPHA}/jre"
  create_valid_jdk_env "${JAVA_NAME_THIRD_ALPHA}"
  list=($(get_installed_javas | sort))
  expected=("${JAVA_NAME_FIRST_ALPHA}/jre" "${JAVA_NAME_SECON_ALPHA}/jre" "${JAVA_NAME_THIRD_ALPHA}")
  assertTrue "Did not find installed Java environments" "[ '${expected[*]}' == '${list[*]}' ]"
}

test_get_installed_javas_no_env() {
  list=($(get_installed_javas))
  expected=()
  assertEquals "List of installed Java envs is not 0" 0 "${#list[@]}"
}

test_set_default_to() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  output=$(set_default_to "${JAVA_NAME}/jre")
  assertEquals 'Success does not yield 0' 0 $?
  assertEquals 'Wrong message' "Setting Java environment '${JAVA_NAME}/jre' as default" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_set_default_to_jre_but_jdk() {
  create_valid_jdk_env "${JAVA_NAME}"
  output=$(set_default_to "${JAVA_NAME}/jre")
  mess="Setting Java environment '${JAVA_NAME}/jre' as default"
  mess+="\nWarning: '${JAVA_NAME}' looks like a valid JDK"
  mess+=" whereas you are only setting '${JAVA_NAME}/jre' as default"
  mess+="\nFix this with 'archlinux-java --force-set ${JAVA_NAME}'"
  expected=$(echo -e ${mess})
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

tests_unset_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(unset_default)
  assertEquals 'Success does not yield 0' 0 $?
  assertEquals 'Wrong message' "Unsetting ${JAVA_NAME}/jre as default" "${output}"
  assertTrue 'Link was not unset' "[ ! -e ${DEFAULT_PATH} ]"
}

test_give_status() {
  JAVA_NAME_1="a$(get_rand_str)"
  JAVA_NAME_2="b$(get_rand_str)"
  create_valid_jre_env "${JAVA_NAME_1}/jre"
  set_default_for_test "${JAVA_NAME_1}/jre"
  create_valid_jdk_env "${JAVA_NAME_2}"
  expected=$(echo -e "Available Java environments:\n  ${JAVA_NAME_1}/jre (default)\n  ${JAVA_NAME_2}")
  assertEquals 'Wrong status output' "${expected}" "$(give_status)"
}

test_give_status_no_default() {
  JAVA_NAME_1="a$(get_rand_str)"
  JAVA_NAME_2="b$(get_rand_str)"
  create_valid_jre_env "${JAVA_NAME_1}/jre"
  create_valid_jdk_env "${JAVA_NAME_2}"
  mess="Available Java environments:"
  mess+="\n  ${JAVA_NAME_1}/jre"
  mess+="\n  ${JAVA_NAME_2}"
  mess+="\nNo Java environment set as default"
  expected=$(echo -e "${mess}")
  assertEquals 'Wrong status output' "${expected}" "$(give_status)"
}

test_give_status_no_javas() {
  output=$(give_status)
  assertEquals 'Wrong status output' 'No compatible Java environment installed' "${output}"
}

test_try_set_default_no_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  output=$(try_set_default "${JAVA_NAME}/jre")
  assertEquals 'Wrong message' "Setting Java environment '${JAVA_NAME}/jre' as default" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_try_set_default_default_exists() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(try_set_default "${JAVA_NAME}/jre")
  mess="The default Java environment is already set to ${JAVA_NAME}/jre"
  mess+="\nPlease use 'archlinux-java --force-set ${JAVA_NAME}/jre' if you want to force it"
  expected=$(echo -e "${mess}")
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_try_set_default_default_invalid() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "non_existing"
  output=$(try_set_default "${JAVA_NAME}/jre")
  assertEquals 'Wrong message' "Setting Java environment '${JAVA_NAME}/jre' as default" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_force_set_default_no_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  output=$(force_set_default "${JAVA_NAME}/jre")
  assertEquals 'Wrong message' "Setting Java environment '${JAVA_NAME}/jre' as default" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_force_set_default_with_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  JAVA_NAME_2="$(get_rand_str)"
  create_valid_jre_env "${JAVA_NAME_2}/jre"
  output=$(force_set_default "${JAVA_NAME_2}/jre")
  mess="Unsetting ${JAVA_NAME}/jre as default"
  mess+="\nSetting Java environment '${JAVA_NAME_2}/jre' as default"
  expected=$(echo -e "${mess}")
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME_2}/jre"
}

test_force_set_default_target_invalid() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  output=$(force_set_default "non_existing")
  expected="'${JVM_DIR}/non_existing' is not a valid Java environment path"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultNotSet
}

#no_default
test_try_unset_default_no_default() {
  create_valid_jdk_env "${JAVA_NAME}"
  output=$(try_unset_default "${JAVA_NAME}")
  expected="'${JAVA_NAME}' is not set as Java environment default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultNotSet
}

test_try_unset_default_default_not_target() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(try_unset_default "other_java")
  expected="'other_java' is not set as Java environment default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_try_unset_default_default_is_target() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(try_unset_default "${JAVA_NAME}/jre")
  mess="Unsetting ${JAVA_NAME}/jre as default"
  mess+="\nNo Java environment is set as default any more"
  expected=$(echo -e "${mess}")
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultNotSet
}

test_fix_default_default_valid() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(fix_default)
  expected="Current default Java environment is valid: '${JAVA_NAME}/jre'"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_fix_default_no_default() {
  create_valid_jre_env "${JAVA_NAME}/jre"
  output=$(fix_default)
  expected="Setting Java environment '${JAVA_NAME}/jre' as default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}/jre"
}

test_fix_default_default_invalid_openjdk7_jdk_installed() {
  create_valid_jdk_env "java-7-openjdk"
  output=$(fix_default)
  expected="Setting Java environment 'java-7-openjdk' as default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  #assertDefaultSetTo "java-7-openjdk"
}

test_fix_default_default_invalid_openjdk7_jre_installed() {
  create_valid_jre_env "java-7-openjdk/jre"
  output=$(fix_default)
  expected="Setting Java environment 'java-7-openjdk/jre' as default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "java-7-openjdk/jre"
}

test_fix_default_default_invalid_random_java_installed() {
  create_valid_jdk_env "${JAVA_NAME}"
  output=$(fix_default)
  expected="Setting Java environment '${JAVA_NAME}' as default"
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}"
}

test_fix_default_default_invalid_no_java_installed() {
  assertEquals 'Wrong message' "No valid Java environment found" "$(fix_default)"
  assertDefaultNotSet
}

test_fix_default_jre_but_jdk_exists() {
  create_valid_jdk_env "${JAVA_NAME}"
  set_default_for_test "${JAVA_NAME}/jre"
  output=$(fix_default)
  mess="Unsetting ${JAVA_NAME}/jre as default"
  mess+="\nSetting Java environment '${JAVA_NAME}' as default"
  expected=$(echo -e ${mess})
  assertEquals 'Wrong message' "${expected}" "${output}"
  assertDefaultSetTo "${JAVA_NAME}"
}


# load shunit2
. shunit2-2.1.6/src/shunit2
